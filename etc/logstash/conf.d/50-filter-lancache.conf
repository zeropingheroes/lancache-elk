filter {

  # Check log path contains lancache
  if [log][file][path] and [log][file][path] =~ /lancache/ {

    # Get log file name
    grok {
      match => {
        "[log][file][path]" => "(?:^|/)(?<log_name>[^/]+?)-(?:access|error)\.log$"
      }
    }

    # Always set field lancache.log
    mutate {
      replace => { "[lancache][log]" => "%{log_name}" }
    }

    # Set field lancache.upstream only if not a special case
    if !([log_name] in ["fallback", "https", "nginx", "stream"]) and [log_name] {
      mutate {
        replace => {
          "[lancache][upstream]" => "%{log_name}"
        }
      }
    }

    # Remove temporary field
    mutate {
      remove_field => ["log_name"]
    }

    # If the log file is in the "http" folder
    if [log][file][path] =~ /\/http\// {

      mutate {
        add_tag => ["http"]
      }

      # If the log filename ends in -access.log
      if [log][file][path] =~ /-access\.log$/ {

        # Set log level to "info" for all access log entries
        mutate {
          add_field => {
            "[log][level]" => "info"
          }
        }

        # Extract fields using Nginx lancache detailed HTTP access log format
        grok {
          match => {
            "message" => "^\[%{HTTPDATE:nginx.access.timestamp}\] %{IPORHOST:client.ip} %{WORD:http.request.method} \"%{URIPATH:url.path}(?:%{URIPARAM:url.query})?\" (?:bytes=%{DATA:http.request.ranges.original}|-) (?:(?:bytes=)%{INT:nginx.slice.range.start}-%{INT:nginx.slice.range.end}|-) %{NUMBER:http.response.status_code} (?:%{NUMBER:http.response.body.bytes}|-) (?:%{NUMBER:http.upstream.response.length}|-) (?:%{WORD:http.upstream.cache.status}|-) %{HOSTNAME:url.domain} (?:%{NUMBER:http.upstream.response.status_code}|-) (?:%{NUMBER:http.upstream.response.time}|-) \"%{DATA:user_agent.original}\"$"
          }
        }

        # Set the record timestamp from the Nginx timestamp field, using the format Nginx uses for access logs
        date {
          match => ["nginx.access.timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
          target => "@timestamp"
        }

        # Remove Nginx timestamp string field
        mutate {
          remove_field => ["nginx.access.timestamp"]
        }

        # Split the range request field into an array
        if [http.request.ranges] {
          split {
            field => "http.request.ranges.original"
            terminator => ","
          }
        }

        # Convert the range request array of strings into an object with "start" and "end" fields
        ruby {
          code => '
            ranges = event.get("http.request.ranges.original")
            if ranges.is_a?(Array)
              objs = ranges.map do |r|
                if r =~ /^(\d+)-(\d+)$/
                  { "start" => $1.to_i, "end" => $2.to_i }
                else
                  nil
                end
              end.compact
              event.set("http.request.ranges", objs)
            elsif ranges.is_a?(String) && ranges =~ /^(\d+)-(\d+)$/
              event.set("http.request.ranges", [ { "start" => $1.to_i, "end" => $2.to_i } ])
            end
          '
        }

      # If the log filename ends in -error.log
      } else if [log][file][path] =~ /-error\.log$/ {

        # Extract fields using Nginx HTTP error log format
        grok {
          match => {
            "message" => "(?<nginx.error.timestamp>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[%{LOGLEVEL:log.level}\] %{POSINT:process.pid}#%{NUMBER:process.thread.id}: \*%{NUMBER:nginx.error.connection_id} %{DATA:error.message}, client: %{IP:client.ip}, server: %{DATA:server.address}, request: \"%{WORD:http.request.method} %{URIPATH:url.path}(?:%{URIPARAM:url.query})? HTTP/%{NUMBER:http.version}\"(?:, upstream: \"%{DATA:upstream.url}\")?, host: \"%{DATA:url.domain}\"(?:, referrer: \"%{DATA:http.request.referrer}\")?$"
          }
        }

        # Set the record timestamp from the Nginx timestamp field, using the format Nginx uses for error logs
        date {
          match => ["nginx.error.timestamp", "YYYY/MM/dd HH:mm:ss"]
          target => "@timestamp"
        }

        # Remove Nginx timestamp field, as it is a string
        mutate {
          remove_field => ["nginx.error.timestamp"]
        }

      # Otherwise, tag the record
      } else {
        mutate {
          add_tag => ["unmatched_http_log"]
        }
      }


      # If the log line is from a Steam log, extract additional information
      if [lancache.upstream] == "steam" {

        # If the URL path is present, extract the depot, manifest and chunk IDs
        if [url.path] {
          grok {
            match => {
              "url.path" => [
                "^/depot/%{INT:steam.depot.id}/chunk/%{BASE16NUM:steam.depot.chunk.id}$",
                "^/depot/%{INT:steam.depot.id}/manifest/%{BASE16NUM:steam.depot.manifest.id}/%{BASE16NUM:steam.depot.manifest.segment1}/%{BASE16NUM:steam.depot.manifest.segment2}$",
                "^/$"
              ]
            }
            tag_on_failure => ["steam_grok_unknown_path"]
          }
        }
      }
    # If the log file is in the "stream" folder
    } else if [log][file][path] =~ /\/stream\// {
      mutate {
        add_tag => ["stream"]
      }

      # If the log filename ends in -access.log
      if [log][file][path] =~ /-access\.log$/ {
        # Set log level to "info" for all access log entries
        mutate {
          add_field => {
            "[log][level]" => "info"
          }
        }

        # Extract fields using Nginx lancache detailed stream access log format
        grok {
          match => {
            "message" => "^\[%{HTTPDATE:nginx.access.timestamp}\] %{IP:client.ip} %{WORD:network.transport} %{NUMBER:http.response.status_code} %{HOSTNAME:upstream.domain} %{NUMBER:server.bytes} %{NUMBER:client.bytes} %{NUMBER:session.duration}$"
          }
        }

        # Set the record timestamp from the Nginx timestamp field, using the format Nginx uses for access logs
        date {
          match => ["nginx.access.timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
          target => "@timestamp"
        }

        # Remove Nginx timestamp string field
        mutate {
          remove_field => ["nginx.access.timestamp"]
        }
      # If the log filename ends in -error.log
      } else if [log][file][path] =~ /-error\.log$/ {

        # Extract fields using Nginx stream error log format
        grok {
          match => {
            "message" => "^(?<nginx.error.timestamp>%{YEAR}/%{MONTHNUM2}/%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:log.level}\] %{POSINT:process.pid}#%{NUMBER:process.thread.id}: \*%{NUMBER:nginx.connection_id} %{DATA:error.message}, client: %{IP:client.ip}, server: %{IP:server.ip}:%{NUMBER:server.port}(?:, upstream: \"%{IP:upstream.ip}:%{NUMBER:upstream.port}\")?, bytes from/to client:%{NUMBER:client.bytes}/%{NUMBER:server.bytes}, bytes from/to upstream:%{NUMBER:upstream.bytes}/%{NUMBER:nginx.bytes}$"
          }
        }
        # Set the record timestamp from the Nginx timestamp field, using the format Nginx uses for error logs
        date {
          match => ["nginx.error.timestamp", "YYYY/MM/dd HH:mm:ss"]
          target => "@timestamp"
        }

        # Remove Nginx timestamp field, as it is a string
        mutate {
          remove_field => ["nginx.error.timestamp"]
        }
      }
    }
  }
}
